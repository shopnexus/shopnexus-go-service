generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator dbml {
  provider              = "prisma-dbml-generator"
  mapToDbSchema         = false
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["account", "product", "payment"]
}

//===== ACCOUNT =====

model Account {
  id       BigInt @id @default(autoincrement())
  username String @unique @db.VarChar(50)
  password String @db.VarChar(100)
  role     Role

  user_account  UserAccount?
  admin_account AdminAccount?

  @@map("base")
  @@schema("account")
}

model UserAccount {
  id                 BigInt  @id
  email              String  @unique @db.VarChar(255)
  phone              String  @unique
  gender             Gender
  full_name          String  @default("") @db.VarChar(100)
  default_address_id BigInt?

  account   Account   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addresses Address[]
  cart      Cart?
  payments  Payment[]

  @@map("user")
  @@schema("account")
}

model AdminAccount {
  id BigInt @id

  account Account @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("admin")
  @@schema("account")
}

//===== USER =====

model Address {
  id          BigInt @id @default(autoincrement())
  user_id     BigInt
  address     String
  city        String
  province    String
  country     String
  postal_code String

  user_account UserAccount? @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("address")
  @@schema("account")
}

model Cart {
  id BigInt @id

  products     ItemOnCart[]
  user_account UserAccount  @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cart")
  @@schema("account")
}

model ItemOnCart {
  cart_id          BigInt
  product_model_id BigInt
  quantity         BigInt

  cart         Cart         @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productModel ProductModel @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([cart_id, product_model_id])
  @@map("item_on_cart")
  @@schema("account")
}

//===== PRODUCT =====

model Brand {
  id          BigInt @id @default(autoincrement())
  name        String
  description String

  productModels ProductModel[]

  @@map("brand")
  @@schema("product")
}

model ProductModel {
  id                BigInt   @id @default(autoincrement())
  brand_id          BigInt
  name              String
  description       String
  list_price        BigInt
  date_manufactured DateTime @db.Timestamptz(3)

  tags     TagOnProduct[]
  brand    Brand          @relation(fields: [brand_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  products Product[]
  sales    Sale[]
  carts    ItemOnCart[]

  @@map("model")
  @@schema("product")
}

model Product {
  id               BigInt   @id @default(autoincrement())
  serial_id        String   @unique
  product_model_id BigInt
  sold             Boolean  @default(false) // Update sold if payment success, back to false if refunded successfully
  // shop_id     BigInt // Remove this because current web is single shop (but multi manager accounts)
  date_created     DateTime @default(now()) @db.Timestamptz(3)
  date_updated     DateTime @default(now()) @db.Timestamptz(3)

  // shop ShopAccount @relation(fields: [shop_id], references: [id])
  product_model ProductModel       @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  payments      ProductOnPayment[]

  @@index([product_model_id, sold]) // faster GetOneAvailableProduct
  @@map("base")
  @@schema("product")
}

// Note: Sale data should be removed when reach end_date
model Sale {
  id               BigInt    @id @default(autoincrement())
  tag_name         String? // either tag_name or product_model_id
  product_model_id BigInt?
  date_started     DateTime  @default(now()) @db.Timestamptz(3)
  date_ended       DateTime? @db.Timestamptz(3)
  quantity         BigInt // 0 to unlimited
  used             BigInt    @default(0)
  is_active        Boolean   @default(true)
  discount_percent BigInt? // either discount_percent or discount_price
  discount_price   BigInt?

  tag           Tag?          @relation(fields: [tag_name], references: [tag_name], onUpdate: Cascade, onDelete: Cascade)
  product_model ProductModel? @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sale")
  @@schema("product")
}

model TagOnProduct {
  product_model_id BigInt
  tag_name         String

  product_model ProductModel @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag           Tag          @relation(fields: [tag_name], references: [tag_name], onUpdate: Cascade, onDelete: Cascade)

  @@id([product_model_id, tag_name])
  @@map("tag_on_product")
  @@schema("product")
}

model Tag {
  tag_name    String @id
  description String @default("")

  productModels TagOnProduct[]
  sales         Sale[]

  @@map("tag")
  @@schema("product")
}

// ===== PAYMENT =====

model ProductOnPayment {
  payment_id        BigInt
  product_serial_id String
  quantity          BigInt
  price             BigInt // Single product price
  total_price       BigInt // Final price (applied discount)

  payment Payment @relation(fields: [payment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [product_serial_id], references: [serial_id], onUpdate: Cascade, onDelete: NoAction)

  @@id([payment_id, product_serial_id])
  @@map("product_on_payment")
  @@schema("payment")
}

model Payment {
  id           BigInt        @id @default(autoincrement())
  user_id      BigInt
  method       PaymentMethod
  status       Status
  address      String
  total        BigInt
  date_created DateTime      @default(now()) @db.Timestamptz(3)

  user_account UserAccount        @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  products     ProductOnPayment[]
  refunds      Refund[]

  @@map("base")
  @@schema("payment")
}

model Refund {
  id         BigInt       @id @default(autoincrement())
  payment_id BigInt
  method     RefundMethod
  status     Status

  reason       String
  address      String? // Address to pick up (only method PICK_UP)
  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @db.Timestamptz(3)

  payment Payment @relation(fields: [payment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("refund")
  @@schema("payment")
}

// ===== OTHER =====

// TODO: catch remove event and remove them in s3; https://chatgpt.com/c/67bea496-7388-800f-a564-9641dc54c520
model Resource {
  owner_id BigInt
  s3_id    String

  @@id([owner_id, s3_id])
  @@map("resource")
  @@schema("product")
}

enum Role {
  ADMIN
  USER

  @@map("role")
  @@schema("account")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
  @@schema("account")
}

enum Status {
  PENDING
  SUCCESS
  CANCELLED
  FAILED

  @@map("status")
  @@schema("payment")
}

enum PaymentMethod {
  CASH
  MOMO
  VNPAY

  @@map("payment_method")
  @@schema("payment")
}

enum RefundMethod {
  DROP_OFF
  PICK_UP

  @@map("refund_method")
  @@schema("payment")
}
