generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator dbml {
  provider              = "prisma-dbml-generator"
  mapToDbSchema         = false
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["account", "product", "payment"]
}

model Account {
  id       BigInt @id @default(autoincrement())
  username String @unique @db.VarChar(50)
  password String @db.VarChar(100)
  role     String @db.VarChar(50)

  user_account  UserAccount?
  admin_account AdminAccount?
  staff_account StaffAccount?
  role_relation Role          @relation(fields: [role], references: [name], onUpdate: Cascade)

  @@map("base")
  @@schema("account")
}

model Role {
  name String @id @db.VarChar(50)

  accounts    Account[]
  permissions PermissionOnRole[]

  @@map("role")
  @@schema("account")
}

model PermissionOnRole {
  role       String @db.VarChar(50)
  permission String @db.VarBit(100) // TODO: Extend if need more permissions

  role_relation       Role       @relation(fields: [role], references: [name], onUpdate: Cascade)

  @@id([permission, role])
  @@map("permission_on_role")
  @@schema("account")
}

model UserAccount {
  id                 BigInt  @id
  email              String  @unique @db.VarChar(255)
  phone              String  @unique @db.VarChar(20)
  gender             Gender
  full_name          String  @default("") @db.VarChar(100)
  default_address_id BigInt?

  account   Account   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addresses Address[]
  cart      Cart?
  payments  Payment[]
  comments  Comment[]

  @@map("user")
  @@schema("account")
}

model AdminAccount {
  id BigInt @id

  account Account @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("admin")
  @@schema("account")
}

model StaffAccount {
  id BigInt @id
  custom_permission String? @db.VarBit(100) // TODO: Extend if need more permissions

  account Account @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("staff")
  @@schema("account")
}

model Address {
  id       BigInt @id @default(autoincrement())
  user_id  BigInt
  address  String
  city     String
  province String
  country  String

  user_account UserAccount? @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("address")
  @@schema("account")
}

model Cart {
  id BigInt @id

  products     ItemOnCart[]
  user_account UserAccount  @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("cart")
  @@schema("account")
}

model ItemOnCart {
  cart_id          BigInt
  product_model_id BigInt
  quantity         BigInt

  cart         Cart         @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productModel ProductModel @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([cart_id, product_model_id])
  @@map("item_on_cart")
  @@schema("account")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
  @@schema("account")
}

//===== PRODUCT =====

model Brand {
  id          BigInt @id @default(autoincrement())
  name        String
  description String

  productModels ProductModel[]
  sales         Sale[]

  @@map("brand")
  @@schema("product")
}

model ProductModel {
  id                BigInt   @id @default(autoincrement())
  type BigInt
  brand_id          BigInt
  name              String
  description       String
  list_price        BigInt
  date_manufactured DateTime @db.Timestamptz(3)

  product_type ProductType @relation(fields: [type], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brand    Brand               @relation(fields: [brand_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags     TagOnProductModel[]
  products Product[]
  sales    Sale[]
  carts    ItemOnCart[]

  @@map("model")
  @@schema("product")
}

model Comment {
  id       BigInt @id @default(autoincrement())
  user_id  BigInt
  dest_id  BigInt
  body     String
  upvote   BigInt @default(0)
  downvote BigInt @default(0)
  score    Int    @default(0)

  user UserAccount @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([user_id, dest_id])
  @@map("comment")
  @@schema("product")
}

model Product {
  id               BigInt   @id @default(autoincrement())
  serial_id        String   @unique
  product_model_id BigInt
  quantity         BigInt   @default(0)
  sold             BigInt   @default(0)
  add_price        BigInt   @default(0)
  is_active        Boolean  @default(true)
  metadata         Json     @default("{}") @db.JsonB
  date_created     DateTime @default(now()) @db.Timestamptz(3)
  date_updated     DateTime @default(now()) @db.Timestamptz(3)

  product_model ProductModel       @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  payments      ProductOnPayment[]

  @@index([product_model_id, sold])
  @@map("base")
  @@schema("product")
}

model ProductType {
  id          BigInt @id @default(autoincrement())
  name        String

  productModels ProductModel[]

  @@map("type")
  @@schema("product")
}

// Note: Sale data should be AUTO-removed when reached end_date
model Sale {
  id BigInt @id @default(autoincrement())

  // either tag, product_model_id or brand_id should be provided
  tag              String?
  product_model_id BigInt?
  brand_id         BigInt?

  date_created     DateTime  @default(now()) @db.Timestamptz(3)
  date_started     DateTime  @default(now()) @db.Timestamptz(3)
  date_ended       DateTime? @db.Timestamptz(3)
  quantity         BigInt // 0 to unlimited
  used             BigInt    @default(0)
  is_active        Boolean   @default(true)

  // discount properties
  discount_percent Int? // either discount_percent or discount_price
  discount_price   BigInt?
  max_discount_price     BigInt @default(0) // 0 means no limit

  tag_relation  Tag?          @relation(fields: [tag], references: [tag], onUpdate: Cascade, onDelete: Cascade)
  product_model ProductModel? @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brand         Brand?        @relation(fields: [brand_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sale")
  @@schema("product")
}

model TagOnProductModel {
  product_model_id BigInt
  tag              String

  product_model ProductModel @relation(fields: [product_model_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag_relation  Tag          @relation(fields: [tag], references: [tag], onUpdate: Cascade, onDelete: Cascade)

  @@id([product_model_id, tag])
  @@map("tag_on_product_model")
  @@schema("product")
}

model Tag {
  tag         String @id
  description String @default("")

  productModels TagOnProductModel[]
  sales         Sale[]

  @@map("tag")
  @@schema("product")
}

// ===== PAYMENT =====

model ProductOnPayment {
  payment_id        BigInt
  product_serial_id String
  quantity          BigInt
  price             BigInt
  total_price       BigInt

  payment Payment @relation(fields: [payment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [product_serial_id], references: [serial_id], onUpdate: Cascade, onDelete: NoAction)

  @@id([payment_id, product_serial_id])
  @@map("product_on_payment")
  @@schema("payment")
}

model Payment {
  id           BigInt        @id @default(autoincrement())
  user_id      BigInt
  method       PaymentMethod
  status       Status
  address      String
  total        BigInt
  date_created DateTime      @default(now()) @db.Timestamptz(3)

  user_account UserAccount        @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  products     ProductOnPayment[]
  refunds      Refund[]
  vnpay        PaymentVnpay?

  @@map("base")
  @@schema("payment")
}

model PaymentVnpay {
  id                  BigInt @id
  vnp_TxnRef          String
  vnp_OrderInfo       String
  vnp_TransactionNo   String
  vnp_TransactionDate String
  vnp_CreateDate      String
  vnp_IpAddr          String

  payment Payment @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("vnpay")
  @@schema("payment")
}

model Refund {
  id           BigInt       @id @default(autoincrement())
  payment_id   BigInt
  method       RefundMethod
  status       Status
  reason       String
  address      String      // PICK_UP address, if method is DROP_OFF, address is empty
  date_created DateTime     @default(now()) @db.Timestamptz(3)
  date_updated DateTime     @default(now()) @db.Timestamptz(3)

  payment Payment @relation(fields: [payment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("refund")
  @@schema("payment")
}

enum PaymentMethod {
  CASH
  VNPAY
  MOMO

  @@map("payment_method")
  @@schema("payment")
}

enum RefundMethod {
  PICK_UP
  DROP_OFF

  @@map("refund_method")
  @@schema("payment")
}

enum Status {
  PENDING
  SUCCESS
  CANCELLED
  FAILED

  @@map("status")
  @@schema("payment")
}

// ===== OTHER =====

// TODO: should catch "remove" event and remove them in s3; https://chatgpt.com/c/67bea496-7388-800f-a564-9641dc54c520
model Resource {
  owner_id BigInt
  url      String

  @@id([owner_id, url])
  @@map("resource")
  @@schema("product")
}
