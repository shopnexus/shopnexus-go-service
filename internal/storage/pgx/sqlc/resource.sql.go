// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource.sql

package sqlc

import (
	"context"
)

type AddResourcesParams struct {
	Type    ProductResourceType
	OwnerID int64
	Url     string
	Order   int32
}

const emptyResources = `-- name: EmptyResources :exec
DELETE FROM product.resource
WHERE owner_id = $1 AND type = $2
`

type EmptyResourcesParams struct {
	OwnerID int64
	Type    ProductResourceType
}

func (q *Queries) EmptyResources(ctx context.Context, arg EmptyResourcesParams) error {
	_, err := q.db.Exec(ctx, emptyResources, arg.OwnerID, arg.Type)
	return err
}

const getResources = `-- name: GetResources :many
SELECT r.url
FROM product.resource r
WHERE r.owner_id = $1 AND r.type = $2
ORDER BY r.order ASC
`

type GetResourcesParams struct {
	OwnerID int64
	Type    ProductResourceType
}

func (q *Queries) GetResources(ctx context.Context, arg GetResourcesParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getResources, arg.OwnerID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
