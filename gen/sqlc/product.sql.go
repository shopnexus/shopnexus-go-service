// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBrands = `-- name: CountBrands :one
WITH filtered_brands AS (
  SELECT b.id
  FROM product.brand b
  WHERE (
    (name ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
    (description ILIKE '%' || $2 || '%' OR $2 IS NULL)
  )
)
SELECT COUNT(id)
FROM filtered_brands
`

type CountBrandsParams struct {
	Name        pgtype.Text
	Description pgtype.Text
}

func (q *Queries) CountBrands(ctx context.Context, arg CountBrandsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countBrands, arg.Name, arg.Description)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBrand = `-- name: CreateBrand :one
WITH inserted_brand AS (
    INSERT INTO product.brand (name, description)
    VALUES ($1, $2)
    RETURNING id, name, description
),
inserted_images AS (
    INSERT INTO product.image (brand_id, url)
    SELECT $1, unnest($3::text[])
    RETURNING url
)
SELECT 
    b.id, b.name, b.description,
    COALESCE(array_agg(i.url), '{}')::text[] as images
FROM inserted_brand b
LEFT JOIN inserted_images i ON true
GROUP BY b.id
`

type CreateBrandParams struct {
	Name        string
	Description string
	Images      []string
}

type CreateBrandRow struct {
	ID          int64
	Name        string
	Description string
	Images      []string
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (CreateBrandRow, error) {
	row := q.db.QueryRow(ctx, createBrand, arg.Name, arg.Description, arg.Images)
	var i CreateBrandRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Images,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product.base (
    serial_id,
    product_model_id,
    date_created,
    date_updated
) VALUES (
    $1, $2, NOW(), NOW()
)
RETURNING serial_id, product_model_id, date_created, date_updated
`

type CreateProductParams struct {
	SerialID       string
	ProductModelID int64
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (ProductBase, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.SerialID, arg.ProductModelID)
	var i ProductBase
	err := row.Scan(
		&i.SerialID,
		&i.ProductModelID,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const createProductModel = `-- name: CreateProductModel :one
WITH inserted_model AS (
    INSERT INTO product.model (
        brand_id, name, description, list_price, date_manufactured
    ) VALUES (
        $1, $2, $3, $4, $5
    ) RETURNING id, brand_id, name, description, list_price, date_manufactured
),
inserted_images AS (
    INSERT INTO product.image (product_model_id, url)
    SELECT $1, unnest($6::text[])
    RETURNING url
),
inserted_tags AS (
    INSERT INTO product.tag_on_product (product_model_id, tag_name)
    SELECT $1, unnest($7::text[])
    RETURNING tag_name
)
SELECT 
    m.id,
    m.brand_id,
    m.name,
    m.description,
    m.list_price,
    COALESCE(array_agg(DISTINCT i.url) FILTER (WHERE i.url IS NOT NULL), '{}')::text[] as images,
    COALESCE(array_agg(DISTINCT t.tag_name) FILTER (WHERE t.tag_name IS NOT NULL), '{}')::text[] as tags
FROM inserted_model m
LEFT JOIN inserted_images i ON true
LEFT JOIN inserted_tags t ON true
GROUP BY m.id
`

type CreateProductModelParams struct {
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Images           []string
	Tags             []string
}

type CreateProductModelRow struct {
	ID          int64
	BrandID     int64
	Name        string
	Description string
	ListPrice   int64
	Images      []string
	Tags        []string
}

func (q *Queries) CreateProductModel(ctx context.Context, arg CreateProductModelParams) (CreateProductModelRow, error) {
	row := q.db.QueryRow(ctx, createProductModel,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
		arg.Images,
		arg.Tags,
	)
	var i CreateProductModelRow
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.Images,
		&i.Tags,
	)
	return i, err
}

const createSale = `-- name: CreateSale :one
INSERT INTO product.sale (
    tag_name,
    product_model_id,
    date_started,
    date_ended,
    quantity,
    used,
    is_active,
    discount_percent,
    discount_price
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, tag_name, product_model_id, date_started, date_ended, quantity, used, is_active, discount_percent, discount_price
`

type CreateSaleParams struct {
	TagName         pgtype.Text
	ProductModelID  pgtype.Int8
	DateStarted     pgtype.Timestamptz
	DateEnded       pgtype.Timestamptz
	Quantity        int64
	Used            int64
	IsActive        bool
	DiscountPercent pgtype.Int8
	DiscountPrice   pgtype.Int8
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (ProductSale, error) {
	row := q.db.QueryRow(ctx, createSale,
		arg.TagName,
		arg.ProductModelID,
		arg.DateStarted,
		arg.DateEnded,
		arg.Quantity,
		arg.Used,
		arg.IsActive,
		arg.DiscountPercent,
		arg.DiscountPrice,
	)
	var i ProductSale
	err := row.Scan(
		&i.ID,
		&i.TagName,
		&i.ProductModelID,
		&i.DateStarted,
		&i.DateEnded,
		&i.Quantity,
		&i.Used,
		&i.IsActive,
		&i.DiscountPercent,
		&i.DiscountPrice,
	)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO product.tag (
    tag_name,
    description
) VALUES (
    $1, $2
) RETURNING tag_name, description
`

type CreateTagParams struct {
	TagName     string
	Description string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (ProductTag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.TagName, arg.Description)
	var i ProductTag
	err := row.Scan(&i.TagName, &i.Description)
	return i, err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM product.brand WHERE id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrand, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product.base WHERE serial_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, serialID string) error {
	_, err := q.db.Exec(ctx, deleteProduct, serialID)
	return err
}

const deleteProductModel = `-- name: DeleteProductModel :exec
DELETE FROM product.model WHERE id = $1
`

func (q *Queries) DeleteProductModel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductModel, id)
	return err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM product.sale WHERE id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSale, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM product.tag WHERE tag_name = $1
`

func (q *Queries) DeleteTag(ctx context.Context, tagName string) error {
	_, err := q.db.Exec(ctx, deleteTag, tagName)
	return err
}

const getBrand = `-- name: GetBrand :one
SELECT 
    b.id, b.name, b.description,
    COALESCE(array_agg(i.url) FILTER (WHERE i.url IS NOT NULL), '{}')::TEXT[] as images
FROM product.brand b
LEFT JOIN product.image i ON i.brand_id = b.id
WHERE b.id = $1
GROUP BY b.id
`

type GetBrandRow struct {
	ID          int64
	Name        string
	Description string
	Images      []string
}

func (q *Queries) GetBrand(ctx context.Context, id int64) (GetBrandRow, error) {
	row := q.db.QueryRow(ctx, getBrand, id)
	var i GetBrandRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Images,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    serial_id,
    product_model_id,
    date_created,
    date_updated
FROM product.base
WHERE serial_id = $1
`

func (q *Queries) GetProduct(ctx context.Context, serialID string) (ProductBase, error) {
	row := q.db.QueryRow(ctx, getProduct, serialID)
	var i ProductBase
	err := row.Scan(
		&i.SerialID,
		&i.ProductModelID,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const getProductModel = `-- name: GetProductModel :one
SELECT 
    pm.id, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
    COALESCE(array_agg(i.url) FILTER (WHERE i.url IS NOT NULL), '{}')::text[] as images,
    COALESCE(array_agg(t.tag_name) FILTER (WHERE t.tag_name IS NOT NULL), '{}')::text[] as tags
FROM product.model pm
LEFT JOIN product.image i ON i.product_model_id = pm.id
LEFT JOIN product.tag_on_product t ON t.product_model_id = pm.id
WHERE pm.id = $1
GROUP BY pm.id
`

type GetProductModelRow struct {
	ID               int64
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Images           []string
	Tags             []string
}

func (q *Queries) GetProductModel(ctx context.Context, id int64) (GetProductModelRow, error) {
	row := q.db.QueryRow(ctx, getProductModel, id)
	var i GetProductModelRow
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.DateManufactured,
		&i.Images,
		&i.Tags,
	)
	return i, err
}

const listBrands = `-- name: ListBrands :many
WITH filtered_brands AS (
  SELECT
    b.id, b.name, b.description, 
    COALESCE(array_agg(i.url) FILTER (WHERE i.url IS NOT NULL), '{}')::TEXT[] as images
  FROM product.brand b
  INNER JOIN product.image i ON i.brand_id = b.id
  WHERE (
    (name ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
    (description ILIKE '%' || $4 || '%' OR $4 IS NULL)
  )
  GROUP BY b.id
)
SELECT id, name, description, images
FROM filtered_brands
LIMIT $2
OFFSET $1
`

type ListBrandsParams struct {
	Offset      int32
	Limit       int32
	Name        pgtype.Text
	Description pgtype.Text
}

type ListBrandsRow struct {
	ID          int64
	Name        string
	Description string
	Images      []string
}

func (q *Queries) ListBrands(ctx context.Context, arg ListBrandsParams) ([]ListBrandsRow, error) {
	rows, err := q.db.Query(ctx, listBrands,
		arg.Offset,
		arg.Limit,
		arg.Name,
		arg.Description,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBrandsRow
	for rows.Next() {
		var i ListBrandsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductModels = `-- name: ListProductModels :many
SELECT 
    pm.id, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
    COALESCE(array_agg(DISTINCT i.url) FILTER (WHERE i.url IS NOT NULL), '{}')::text[] as images,
    COALESCE(array_agg(DISTINCT t.tag_name) FILTER (WHERE t.tag_name IS NOT NULL), '{}')::text[] as tags
FROM product.model pm
LEFT JOIN product.image i ON i.product_model_id = pm.id
LEFT JOIN product.tag_on_product t ON t.product_model_id = pm.id
WHERE (
    (pm.brand_id = $1 OR $1 IS NULL) AND
    (pm.name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
    (pm.description ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
    (pm.list_price = $4 OR $4 IS NULL) AND
    (pm.date_manufactured >= $5 OR $5 IS NULL) AND
    (pm.date_manufactured <= $6 OR $6 IS NULL)
)
GROUP BY pm.id
ORDER BY pm.id DESC
LIMIT $8
OFFSET $7
`

type ListProductModelsParams struct {
	BrandID              pgtype.Int8
	Name                 pgtype.Text
	Description          pgtype.Text
	ListPrice            pgtype.Int8
	DateManufacturedFrom pgtype.Timestamptz
	DateManufacturedTo   pgtype.Timestamptz
	Offset               int32
	Limit                int32
}

type ListProductModelsRow struct {
	ID               int64
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Images           []string
	Tags             []string
}

func (q *Queries) ListProductModels(ctx context.Context, arg ListProductModelsParams) ([]ListProductModelsRow, error) {
	rows, err := q.db.Query(ctx, listProductModels,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufacturedFrom,
		arg.DateManufacturedTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductModelsRow
	for rows.Next() {
		var i ListProductModelsRow
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.Name,
			&i.Description,
			&i.ListPrice,
			&i.DateManufactured,
			&i.Images,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT 
    serial_id,
    product_model_id,
    date_created,
    date_updated
FROM product.base
WHERE (
    (product_model_id = $1 OR $1 IS NULL) AND
    (date_created >= $2 OR $2 IS NULL) AND
    (date_created <= $3 OR $3 IS NULL)
)
ORDER BY date_created DESC
LIMIT $5
OFFSET $4
`

type ListProductsParams struct {
	ProductModelID  pgtype.Int8
	DateCreatedFrom pgtype.Timestamptz
	DateCreatedTo   pgtype.Timestamptz
	Offset          int32
	Limit           int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ProductBase, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.ProductModelID,
		arg.DateCreatedFrom,
		arg.DateCreatedTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductBase
	for rows.Next() {
		var i ProductBase
		if err := rows.Scan(
			&i.SerialID,
			&i.ProductModelID,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :exec
UPDATE product.brand
SET
    name = COALESCE($2, name),
    description = COALESCE($3, description)
WHERE id = $1
`

type UpdateBrandParams struct {
	ID          int64
	Name        pgtype.Text
	Description pgtype.Text
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) error {
	_, err := q.db.Exec(ctx, updateBrand, arg.ID, arg.Name, arg.Description)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product.base
SET 
    product_model_id = COALESCE($2, product_model_id),
    date_updated = NOW()
WHERE serial_id = $1
`

type UpdateProductParams struct {
	SerialID       string
	ProductModelID pgtype.Int8
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct, arg.SerialID, arg.ProductModelID)
	return err
}

const updateProductModel = `-- name: UpdateProductModel :exec
UPDATE product.model
SET 
    brand_id = COALESCE($2, brand_id),
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    list_price = COALESCE($5, list_price),
    date_manufactured = COALESCE($6, date_manufactured)
WHERE id = $1
`

type UpdateProductModelParams struct {
	ID               int64
	BrandID          pgtype.Int8
	Name             pgtype.Text
	Description      pgtype.Text
	ListPrice        pgtype.Int8
	DateManufactured pgtype.Timestamptz
}

func (q *Queries) UpdateProductModel(ctx context.Context, arg UpdateProductModelParams) error {
	_, err := q.db.Exec(ctx, updateProductModel,
		arg.ID,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
	)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE product.tag
SET 
    description = COALESCE($2, description)
WHERE tag_name = $1
`

type UpdateTagParams struct {
	TagName     string
	Description pgtype.Text
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag, arg.TagName, arg.Description)
	return err
}
