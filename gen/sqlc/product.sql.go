// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addResources = `-- name: AddResources :exec
INSERT INTO product.resource (owner_id, url)
SELECT $1, unnest($2::text[])
ON CONFLICT (owner_id, url) DO NOTHING
`

type AddResourcesParams struct {
	OwnerID   int64
	Resources []string
}

func (q *Queries) AddResources(ctx context.Context, arg AddResourcesParams) error {
	_, err := q.db.Exec(ctx, addResources, arg.OwnerID, arg.Resources)
	return err
}

const countProducts = `-- name: CountProducts :one
SELECT COUNT(id)
FROM product.base
WHERE (
    (id = $1 OR $1 IS NULL) AND
    (product_model_id = $2 OR $2 IS NULL) AND
    (quantity >= $3 OR $3 IS NULL) AND
    (quantity <= $4 OR $4 IS NULL) AND
    (sold >= $5 OR $5 IS NULL) AND
    (sold <= $6 OR $6 IS NULL) AND
    (add_price >= $7 OR $7 IS NULL) AND
    (add_price <= $8 OR $8 IS NULL) AND
    (is_active = $9 OR $9 IS NULL) AND
    (can_combine = $10 OR $10 IS NULL) AND
    (metadata @> $11 OR $11 IS NULL) AND
    (date_created >= $12 OR $12 IS NULL) AND
    (date_created <= $13 OR $13 IS NULL)
)
`

type CountProductsParams struct {
	ID              pgtype.Int8
	ProductModelID  pgtype.Int8
	QuantityFrom    pgtype.Int8
	QuantityTo      pgtype.Int8
	SoldFrom        pgtype.Int8
	SoldTo          pgtype.Int8
	AddPriceFrom    pgtype.Int8
	AddPriceTo      pgtype.Int8
	IsActive        pgtype.Bool
	CanCombine      pgtype.Bool
	Metadata        []byte
	DateCreatedFrom pgtype.Timestamptz
	DateCreatedTo   pgtype.Timestamptz
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts,
		arg.ID,
		arg.ProductModelID,
		arg.QuantityFrom,
		arg.QuantityTo,
		arg.SoldFrom,
		arg.SoldTo,
		arg.AddPriceFrom,
		arg.AddPriceTo,
		arg.IsActive,
		arg.CanCombine,
		arg.Metadata,
		arg.DateCreatedFrom,
		arg.DateCreatedTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
WITH inserted_product AS (
    INSERT INTO product.base (
        product_model_id,
        quantity,
        sold,
        add_price,
        is_active,  
        can_combine,
        metadata
    ) VALUES ($1, $2, $3, $4, $5, $6, $7)
    RETURNING id, product_model_id, quantity, sold, add_price, is_active, can_combine, metadata, date_created, date_updated
),
inserted_resources AS (
    INSERT INTO product.resource (owner_id, url)
    SELECT id, unnest($8::text[]) FROM inserted_product
    RETURNING url
)
SELECT
    p.id,
    COALESCE(array_agg(DISTINCT res.url) FILTER (WHERE res.url IS NOT NULL), '{}')::text[] as resources
FROM inserted_product p
LEFT JOIN inserted_resources res ON true
GROUP BY p.id
`

type CreateProductParams struct {
	ProductModelID int64
	Quantity       int64
	Sold           int64
	AddPrice       int64
	IsActive       bool
	CanCombine     bool
	Metadata       []byte
	Resources      []string
}

type CreateProductRow struct {
	ID        int64
	Resources []string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (CreateProductRow, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ProductModelID,
		arg.Quantity,
		arg.Sold,
		arg.AddPrice,
		arg.IsActive,
		arg.CanCombine,
		arg.Metadata,
		arg.Resources,
	)
	var i CreateProductRow
	err := row.Scan(&i.ID, &i.Resources)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product.base WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    p.id, p.product_model_id, p.quantity, p.sold, p.add_price, p.is_active, p.can_combine, p.metadata, p.date_created, p.date_updated,
    COALESCE(array_agg(DISTINCT res.url) FILTER (WHERE res.url IS NOT NULL), '{}')::text[] as resources
FROM product.base p
LEFT JOIN product.resource res ON res.owner_id = p.id
WHERE id = $1
GROUP BY p.id
`

type GetProductRow struct {
	ID             int64
	ProductModelID int64
	Quantity       int64
	Sold           int64
	AddPrice       int64
	IsActive       bool
	CanCombine     bool
	Metadata       []byte
	DateCreated    pgtype.Timestamptz
	DateUpdated    pgtype.Timestamptz
	Resources      []string
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.ProductModelID,
		&i.Quantity,
		&i.Sold,
		&i.AddPrice,
		&i.IsActive,
		&i.CanCombine,
		&i.Metadata,
		&i.DateCreated,
		&i.DateUpdated,
		&i.Resources,
	)
	return i, err
}

const getResources = `-- name: GetResources :many
SELECT url
FROM product.resource
WHERE owner_id = $1
`

func (q *Queries) GetResources(ctx context.Context, ownerID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getResources, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT
    p.id, p.product_model_id, p.quantity, p.sold, p.add_price, p.is_active, p.can_combine, p.metadata, p.date_created, p.date_updated,
    COALESCE(array_agg(DISTINCT res.url) FILTER (WHERE res.url IS NOT NULL), '{}')::text[] as resources
FROM product.base p
LEFT JOIN product.resource res ON res.owner_id = p.id
WHERE (
    (id = $1 OR $1 IS NULL) AND
    (product_model_id = $2 OR $2 IS NULL) AND
    (quantity >= $3 OR $3 IS NULL) AND
    (quantity <= $4 OR $4 IS NULL) AND
    (sold >= $5 OR $5 IS NULL) AND
    (sold <= $6 OR $6 IS NULL) AND
    (add_price >= $7 OR $7 IS NULL) AND
    (add_price <= $8 OR $8 IS NULL) AND
    (is_active = $9 OR $9 IS NULL) AND
    (can_combine = $10 OR $10 IS NULL) AND
    (metadata @> $11 OR $11 IS NULL) AND
    (date_created >= $12 OR $12 IS NULL) AND
    (date_created <= $13 OR $13 IS NULL)
)
GROUP BY p.id
ORDER BY date_created DESC
LIMIT $15
OFFSET $14
`

type ListProductsParams struct {
	ID              pgtype.Int8
	ProductModelID  pgtype.Int8
	QuantityFrom    pgtype.Int8
	QuantityTo      pgtype.Int8
	SoldFrom        pgtype.Int8
	SoldTo          pgtype.Int8
	AddPriceFrom    pgtype.Int8
	AddPriceTo      pgtype.Int8
	IsActive        pgtype.Bool
	CanCombine      pgtype.Bool
	Metadata        []byte
	DateCreatedFrom pgtype.Timestamptz
	DateCreatedTo   pgtype.Timestamptz
	Offset          int32
	Limit           int32
}

type ListProductsRow struct {
	ID             int64
	ProductModelID int64
	Quantity       int64
	Sold           int64
	AddPrice       int64
	IsActive       bool
	CanCombine     bool
	Metadata       []byte
	DateCreated    pgtype.Timestamptz
	DateUpdated    pgtype.Timestamptz
	Resources      []string
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.ID,
		arg.ProductModelID,
		arg.QuantityFrom,
		arg.QuantityTo,
		arg.SoldFrom,
		arg.SoldTo,
		arg.AddPriceFrom,
		arg.AddPriceTo,
		arg.IsActive,
		arg.CanCombine,
		arg.Metadata,
		arg.DateCreatedFrom,
		arg.DateCreatedTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductModelID,
			&i.Quantity,
			&i.Sold,
			&i.AddPrice,
			&i.IsActive,
			&i.CanCombine,
			&i.Metadata,
			&i.DateCreated,
			&i.DateUpdated,
			&i.Resources,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeResources = `-- name: RemoveResources :exec
DELETE FROM product.resource
WHERE owner_id = $1 AND url = ANY($2::text[])
`

type RemoveResourcesParams struct {
	OwnerID   int64
	Resources []string
}

func (q *Queries) RemoveResources(ctx context.Context, arg RemoveResourcesParams) error {
	_, err := q.db.Exec(ctx, removeResources, arg.OwnerID, arg.Resources)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product.base
SET
    product_model_id = COALESCE($2, product_model_id),
    quantity = COALESCE($3, quantity),
    sold = COALESCE($4, sold),
    add_price = COALESCE($5, add_price),
    can_combine = COALESCE($6, can_combine),
    is_active = COALESCE($7, is_active),
    metadata = COALESCE($8, metadata)
WHERE id = $1
`

type UpdateProductParams struct {
	ID             int64
	ProductModelID pgtype.Int8
	Quantity       pgtype.Int8
	Sold           pgtype.Int8
	AddPrice       pgtype.Int8
	CanCombine     pgtype.Bool
	IsActive       pgtype.Bool
	Metadata       []byte
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.ProductModelID,
		arg.Quantity,
		arg.Sold,
		arg.AddPrice,
		arg.CanCombine,
		arg.IsActive,
		arg.Metadata,
	)
	return err
}

const updateProductSold = `-- name: UpdateProductSold :exec
UPDATE product.base
SET
    sold = sold + $1
WHERE
    (id = ANY($2::bigint[])) AND 
    (sold + $1 <= quantity)
`

type UpdateProductSoldParams struct {
	Amount int64
	Ids    []int64
}

func (q *Queries) UpdateProductSold(ctx context.Context, arg UpdateProductSoldParams) error {
	_, err := q.db.Exec(ctx, updateProductSold, arg.Amount, arg.Ids)
	return err
}
