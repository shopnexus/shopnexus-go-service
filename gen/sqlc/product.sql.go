// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(id)
FROM product.base
WHERE (
    (product_model_id = $1 OR $1 IS NULL) AND
    (quantity >= $2 OR $2 IS NULL) AND
    (quantity <= $3 OR $3 IS NULL) AND
    (sold >= $4 OR $4 IS NULL) AND
    (sold <= $5 OR $5 IS NULL) AND
    (add_price >= $6 OR $6 IS NULL) AND
    (add_price <= $7 OR $7 IS NULL) AND
    (is_active = $8 OR $8 IS NULL) AND
    (metadata @> $9 OR $9 IS NULL) AND
    (date_created >= $10 OR $10 IS NULL) AND
    (date_created <= $11 OR $11 IS NULL)
)
`

type CountProductsParams struct {
	ProductModelID  pgtype.Int8
	QuantityFrom    pgtype.Int8
	QuantityTo      pgtype.Int8
	SoldFrom        pgtype.Int8
	SoldTo          pgtype.Int8
	AddPriceFrom    pgtype.Int8
	AddPriceTo      pgtype.Int8
	IsActive        pgtype.Bool
	Metadata        []byte
	DateCreatedFrom pgtype.Timestamptz
	DateCreatedTo   pgtype.Timestamptz
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts,
		arg.ProductModelID,
		arg.QuantityFrom,
		arg.QuantityTo,
		arg.SoldFrom,
		arg.SoldTo,
		arg.AddPriceFrom,
		arg.AddPriceTo,
		arg.IsActive,
		arg.Metadata,
		arg.DateCreatedFrom,
		arg.DateCreatedTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product.base (
    serial_id,
    product_model_id,
    quantity,
    sold,
    add_price,
    is_active,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, serial_id, product_model_id, quantity, sold, add_price, is_active, metadata, date_created, date_updated
`

type CreateProductParams struct {
	SerialID       string
	ProductModelID int64
	Quantity       int64
	Sold           int64
	AddPrice       int64
	IsActive       bool
	Metadata       []byte
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (ProductBase, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SerialID,
		arg.ProductModelID,
		arg.Quantity,
		arg.Sold,
		arg.AddPrice,
		arg.IsActive,
		arg.Metadata,
	)
	var i ProductBase
	err := row.Scan(
		&i.ID,
		&i.SerialID,
		&i.ProductModelID,
		&i.Quantity,
		&i.Sold,
		&i.AddPrice,
		&i.IsActive,
		&i.Metadata,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product.base WHERE (
    id = $1 OR 
    serial_id = $2
)
`

type DeleteProductParams struct {
	ID       pgtype.Int8
	SerialID pgtype.Text
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.Exec(ctx, deleteProduct, arg.ID, arg.SerialID)
	return err
}

const getAvailableProducts = `-- name: GetAvailableProducts :many
SELECT id, serial_id, product_model_id, quantity, sold, add_price, is_active, metadata, date_created, date_updated
FROM product.base
WHERE (
    product_model_id = $1 AND
    sold + $2 <= quantity
)
LIMIT $2
`

type GetAvailableProductsParams struct {
	ProductModelID int64
	Amount         int32
}

func (q *Queries) GetAvailableProducts(ctx context.Context, arg GetAvailableProductsParams) ([]ProductBase, error) {
	rows, err := q.db.Query(ctx, getAvailableProducts, arg.ProductModelID, arg.Amount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductBase
	for rows.Next() {
		var i ProductBase
		if err := rows.Scan(
			&i.ID,
			&i.SerialID,
			&i.ProductModelID,
			&i.Quantity,
			&i.Sold,
			&i.AddPrice,
			&i.IsActive,
			&i.Metadata,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, serial_id, product_model_id, quantity, sold, add_price, is_active, metadata, date_created, date_updated
FROM product.base
WHERE (
    id = $1 OR 
    serial_id = $2
)
`

type GetProductParams struct {
	ID       pgtype.Int8
	SerialID pgtype.Text
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (ProductBase, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ID, arg.SerialID)
	var i ProductBase
	err := row.Scan(
		&i.ID,
		&i.SerialID,
		&i.ProductModelID,
		&i.Quantity,
		&i.Sold,
		&i.AddPrice,
		&i.IsActive,
		&i.Metadata,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, serial_id, product_model_id, quantity, sold, add_price, is_active, metadata, date_created, date_updated
FROM product.base
WHERE (
    (product_model_id = $1 OR $1 IS NULL) AND
    (quantity >= $2 OR $2 IS NULL) AND
    (quantity <= $3 OR $3 IS NULL) AND
    (sold >= $4 OR $4 IS NULL) AND
    (sold <= $5 OR $5 IS NULL) AND
    (add_price >= $6 OR $6 IS NULL) AND
    (add_price <= $7 OR $7 IS NULL) AND
    (is_active = $8 OR $8 IS NULL) AND
    (metadata @> $9 OR $9 IS NULL) AND
    (date_created >= $10 OR $10 IS NULL) AND
    (date_created <= $11 OR $11 IS NULL)
)
ORDER BY date_created DESC
LIMIT $13
OFFSET $12
`

type ListProductsParams struct {
	ProductModelID  pgtype.Int8
	QuantityFrom    pgtype.Int8
	QuantityTo      pgtype.Int8
	SoldFrom        pgtype.Int8
	SoldTo          pgtype.Int8
	AddPriceFrom    pgtype.Int8
	AddPriceTo      pgtype.Int8
	IsActive        pgtype.Bool
	Metadata        []byte
	DateCreatedFrom pgtype.Timestamptz
	DateCreatedTo   pgtype.Timestamptz
	Offset          int32
	Limit           int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ProductBase, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.ProductModelID,
		arg.QuantityFrom,
		arg.QuantityTo,
		arg.SoldFrom,
		arg.SoldTo,
		arg.AddPriceFrom,
		arg.AddPriceTo,
		arg.IsActive,
		arg.Metadata,
		arg.DateCreatedFrom,
		arg.DateCreatedTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductBase
	for rows.Next() {
		var i ProductBase
		if err := rows.Scan(
			&i.ID,
			&i.SerialID,
			&i.ProductModelID,
			&i.Quantity,
			&i.Sold,
			&i.AddPrice,
			&i.IsActive,
			&i.Metadata,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product.base
SET
    serial_id = COALESCE($2, serial_id),
    product_model_id = COALESCE($3, product_model_id),
    quantity = COALESCE($4, quantity),
    sold = COALESCE($5, sold),
    add_price = COALESCE($6, add_price),
    is_active = COALESCE($7, is_active),
    metadata = COALESCE($8, metadata)
WHERE id = $1
`

type UpdateProductParams struct {
	ID             int64
	SerialID       pgtype.Text
	ProductModelID pgtype.Int8
	Quantity       pgtype.Int8
	Sold           pgtype.Int8
	AddPrice       pgtype.Int8
	IsActive       pgtype.Bool
	Metadata       []byte
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.SerialID,
		arg.ProductModelID,
		arg.Quantity,
		arg.Sold,
		arg.AddPrice,
		arg.IsActive,
		arg.Metadata,
	)
	return err
}
