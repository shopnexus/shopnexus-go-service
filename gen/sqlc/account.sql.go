// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package sqlc

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO "account".item_on_cart (cart_id, product_model_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (cart_id, product_model_id)
DO UPDATE SET quantity = "account".item_on_cart.quantity + $3
RETURNING quantity
`

type AddCartItemParams struct {
	CartID         int64
	ProductModelID int64
	Quantity       int64
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (int64, error) {
	row := q.db.QueryRow(ctx, addCartItem, arg.CartID, arg.ProductModelID, arg.Quantity)
	var quantity int64
	err := row.Scan(&quantity)
	return quantity, err
}

const createCart = `-- name: CreateCart :exec
INSERT INTO "account".cart (id)
VALUES ($1)
`

func (q *Queries) CreateCart(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, createCart, id)
	return err
}

const deductCartItem = `-- name: DeductCartItem :one
UPDATE "account".item_on_cart
SET quantity = quantity - $3
WHERE cart_id = $1 AND product_model_id = $2
RETURNING quantity
`

type DeductCartItemParams struct {
	CartID         int64
	ProductModelID int64
	Quantity       int64
}

func (q *Queries) DeductCartItem(ctx context.Context, arg DeductCartItemParams) (int64, error) {
	row := q.db.QueryRow(ctx, deductCartItem, arg.CartID, arg.ProductModelID, arg.Quantity)
	var quantity int64
	err := row.Scan(&quantity)
	return quantity, err
}

const getCart = `-- name: GetCart :one
SELECT id FROM "account".cart
WHERE id = $1
`

func (q *Queries) GetCart(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	err := row.Scan(&id)
	return id, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT cart_id, product_model_id, quantity FROM "account".item_on_cart
WHERE cart_id = $1
`

func (q *Queries) GetCartItems(ctx context.Context, cartID int64) ([]AccountItemOnCart, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountItemOnCart
	for rows.Next() {
		var i AccountItemOnCart
		if err := rows.Scan(&i.CartID, &i.ProductModelID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM "account".item_on_cart
WHERE cart_id = $1 AND product_model_id = $2
`

type RemoveCartItemParams struct {
	CartID         int64
	ProductModelID int64
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.Exec(ctx, removeCartItem, arg.CartID, arg.ProductModelID)
	return err
}
