// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountAccountType string

const (
	AccountAccountTypeACCOUNTTYPEUSER  AccountAccountType = "ACCOUNT_TYPE_USER"
	AccountAccountTypeACCOUNTTYPEADMIN AccountAccountType = "ACCOUNT_TYPE_ADMIN"
)

func (e *AccountAccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountAccountType(s)
	case string:
		*e = AccountAccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountAccountType: %T", src)
	}
	return nil
}

type NullAccountAccountType struct {
	AccountAccountType AccountAccountType
	Valid              bool // Valid is true if AccountAccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountAccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountAccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountAccountType), nil
}

type AccountGender string

const (
	AccountGenderMALE   AccountGender = "MALE"
	AccountGenderFEMALE AccountGender = "FEMALE"
	AccountGenderOTHER  AccountGender = "OTHER"
)

func (e *AccountGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountGender(s)
	case string:
		*e = AccountGender(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountGender: %T", src)
	}
	return nil
}

type NullAccountGender struct {
	AccountGender AccountGender
	Valid         bool // Valid is true if AccountGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountGender) Scan(value interface{}) error {
	if value == nil {
		ns.AccountGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountGender), nil
}

type PaymentPaymentMethod string

const (
	PaymentPaymentMethodCASH  PaymentPaymentMethod = "CASH"
	PaymentPaymentMethodVNPAY PaymentPaymentMethod = "VNPAY"
	PaymentPaymentMethodMOMO  PaymentPaymentMethod = "MOMO"
)

func (e *PaymentPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentPaymentMethod(s)
	case string:
		*e = PaymentPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentPaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentPaymentMethod struct {
	PaymentPaymentMethod PaymentPaymentMethod
	Valid                bool // Valid is true if PaymentPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentPaymentMethod), nil
}

type PaymentRefundMethod string

const (
	PaymentRefundMethodPICKUP  PaymentRefundMethod = "PICK_UP"
	PaymentRefundMethodDROPOFF PaymentRefundMethod = "DROP_OFF"
)

func (e *PaymentRefundMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentRefundMethod(s)
	case string:
		*e = PaymentRefundMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentRefundMethod: %T", src)
	}
	return nil
}

type NullPaymentRefundMethod struct {
	PaymentRefundMethod PaymentRefundMethod
	Valid               bool // Valid is true if PaymentRefundMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentRefundMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentRefundMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentRefundMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentRefundMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentRefundMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING  PaymentStatus = "PENDING"
	PaymentStatusSUCCESS  PaymentStatus = "SUCCESS"
	PaymentStatusCANCELED PaymentStatus = "CANCELED"
	PaymentStatusFAILED   PaymentStatus = "FAILED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type ProductCommentType string

const (
	ProductCommentTypePRODUCTMODEL ProductCommentType = "PRODUCT_MODEL"
	ProductCommentTypeBRAND        ProductCommentType = "BRAND"
	ProductCommentTypeCOMMENT      ProductCommentType = "COMMENT"
)

func (e *ProductCommentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductCommentType(s)
	case string:
		*e = ProductCommentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductCommentType: %T", src)
	}
	return nil
}

type NullProductCommentType struct {
	ProductCommentType ProductCommentType
	Valid              bool // Valid is true if ProductCommentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductCommentType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductCommentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductCommentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductCommentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductCommentType), nil
}

type ProductResourceType string

const (
	ProductResourceTypeBRAND        ProductResourceType = "BRAND"
	ProductResourceTypeCOMMENT      ProductResourceType = "COMMENT"
	ProductResourceTypePRODUCTMODEL ProductResourceType = "PRODUCT_MODEL"
	ProductResourceTypePRODUCT      ProductResourceType = "PRODUCT"
	ProductResourceTypeREFUND       ProductResourceType = "REFUND"
)

func (e *ProductResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductResourceType(s)
	case string:
		*e = ProductResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductResourceType: %T", src)
	}
	return nil
}

type NullProductResourceType struct {
	ProductResourceType ProductResourceType
	Valid               bool // Valid is true if ProductResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductResourceType), nil
}

type ProductSaleType string

const (
	ProductSaleTypeSALETYPETAG          ProductSaleType = "SALE_TYPE_TAG"
	ProductSaleTypeSALETYPEPRODUCTMODEL ProductSaleType = "SALE_TYPE_PRODUCT_MODEL"
	ProductSaleTypeSALETYPEBRAND        ProductSaleType = "SALE_TYPE_BRAND"
)

func (e *ProductSaleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductSaleType(s)
	case string:
		*e = ProductSaleType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductSaleType: %T", src)
	}
	return nil
}

type NullProductSaleType struct {
	ProductSaleType ProductSaleType
	Valid           bool // Valid is true if ProductSaleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductSaleType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductSaleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductSaleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductSaleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductSaleType), nil
}

type AccountAddress struct {
	ID          int64
	UserID      int64
	FullName    string
	Phone       string
	Address     string
	City        string
	Province    string
	Country     string
	DateCreated pgtype.Timestamptz
}

type AccountAdmin struct {
	ID           int64
	AvatarUrl    pgtype.Text
	IsSuperAdmin bool
}

type AccountBase struct {
	ID       int64
	Username string
	Password string
	Type     AccountAccountType
}

type AccountCart struct {
	ID int64
}

type AccountItemOnCart struct {
	CartID      int64
	ProductID   int64
	Quantity    int64
	DateCreated pgtype.Timestamptz
}

type AccountPermission struct {
	ID          string
	Description pgtype.Text
}

type AccountPermissionOnRole struct {
	RoleID       string
	PermissionID string
}

type AccountRole struct {
	ID          string
	Description pgtype.Text
}

type AccountRoleOnAdmin struct {
	AdminID int64
	RoleID  string
}

type AccountUser struct {
	ID               int64
	Email            string
	Phone            string
	Gender           AccountGender
	FullName         string
	DefaultAddressID pgtype.Int8
	AvatarUrl        pgtype.Text
}

type PaymentBase struct {
	ID          int64
	UserID      int64
	Method      PaymentPaymentMethod
	Status      PaymentStatus
	Address     string
	Total       int64
	DateCreated pgtype.Timestamptz
}

type PaymentProductOnPayment struct {
	ID         int64
	PaymentID  int64
	ProductID  int64
	Quantity   int64
	Price      int64
	TotalPrice int64
}

type PaymentProductSerialOnProductOnPayment struct {
	ProductOnPaymentID int64
	ProductSerialID    string
}

type PaymentRefund struct {
	ID                 int64
	ProductOnPaymentID int64
	Method             PaymentRefundMethod
	Status             PaymentStatus
	Reason             string
	Address            string
	Amount             int64
	ApprovedByID       pgtype.Int8
	DateCreated        pgtype.Timestamptz
}

type PaymentVnpay struct {
	ID                   int64
	VnpAmount            string
	VnpBankCode          string
	VnpCardType          string
	VnpOrderInfo         string
	VnpPayDate           string
	VnpResponseCode      string
	VnpSecureHash        string
	VnpTmnCode           string
	VnpTransactionNo     string
	VnpTransactionStatus string
	VnpTxnRef            string
}

type ProductBase struct {
	ID              int64
	ProductModelID  int64
	AdditionalPrice int64
	IsActive        bool
	CanCombine      bool
	Metadata        []byte
	DateCreated     pgtype.Timestamptz
}

type ProductBrand struct {
	ID          int64
	Name        string
	Description string
}

type ProductComment struct {
	ID          int64
	Type        ProductCommentType
	AccountID   int64
	DestID      int64
	Body        string
	Upvote      int64
	Downvote    int64
	Score       int32
	DateCreated pgtype.Timestamptz
	DateUpdated pgtype.Timestamptz
}

type ProductModel struct {
	ID               int64
	Type             int64
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
}

type ProductResource struct {
	ID      int64
	Type    ProductResourceType
	OwnerID int64
	Url     string
	Order   int32
}

type ProductSale struct {
	ID               int64
	Type             ProductSaleType
	ItemID           int64
	DateCreated      pgtype.Timestamptz
	DateStarted      pgtype.Timestamptz
	DateEnded        pgtype.Timestamptz
	IsActive         bool
	DiscountPercent  pgtype.Int4
	DiscountPrice    pgtype.Int8
	MaxDiscountPrice int64
}

type ProductSaleTracking struct {
	SaleID       int64
	CurrentStock int64
	Used         int64
}

type ProductSerial struct {
	SerialID    string
	ProductID   int64
	IsSold      bool
	IsActive    bool
	DateCreated pgtype.Timestamptz
}

type ProductTag struct {
	ID          int64
	Tag         string
	Description string
}

type ProductTagOnProductModel struct {
	ProductModelID int64
	Tag            string
}

type ProductTracking struct {
	ProductID    int64
	CurrentStock int64
	Sold         int64
}

type ProductType struct {
	ID   int64
	Name string
}
