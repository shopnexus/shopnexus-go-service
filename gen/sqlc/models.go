// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountGender string

const (
	AccountGenderMALE   AccountGender = "MALE"
	AccountGenderFEMALE AccountGender = "FEMALE"
	AccountGenderOTHER  AccountGender = "OTHER"
)

func (e *AccountGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountGender(s)
	case string:
		*e = AccountGender(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountGender: %T", src)
	}
	return nil
}

type NullAccountGender struct {
	AccountGender AccountGender
	Valid         bool // Valid is true if AccountGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountGender) Scan(value interface{}) error {
	if value == nil {
		ns.AccountGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountGender), nil
}

type AccountRole string

const (
	AccountRoleADMIN AccountRole = "ADMIN"
	AccountRoleUSER  AccountRole = "USER"
)

func (e *AccountRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountRole(s)
	case string:
		*e = AccountRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountRole: %T", src)
	}
	return nil
}

type NullAccountRole struct {
	AccountRole AccountRole
	Valid       bool // Valid is true if AccountRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountRole) Scan(value interface{}) error {
	if value == nil {
		ns.AccountRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountRole), nil
}

type PaymentPaymentMethod string

const (
	PaymentPaymentMethodCASH  PaymentPaymentMethod = "CASH"
	PaymentPaymentMethodMOMO  PaymentPaymentMethod = "MOMO"
	PaymentPaymentMethodVNPAY PaymentPaymentMethod = "VNPAY"
)

func (e *PaymentPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentPaymentMethod(s)
	case string:
		*e = PaymentPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentPaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentPaymentMethod struct {
	PaymentPaymentMethod PaymentPaymentMethod
	Valid                bool // Valid is true if PaymentPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentPaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING   PaymentStatus = "PENDING"
	PaymentStatusSUCCESS   PaymentStatus = "SUCCESS"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"
	PaymentStatusFAILED    PaymentStatus = "FAILED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type AccountAddress struct {
	ID         []byte
	UserID     []byte
	Address    string
	City       string
	Province   string
	Country    string
	PostalCode string
}

type AccountBase struct {
	ID       []byte
	Username string
	Password string
	Role     AccountRole
}

type AccountCart struct {
	ID []byte
}

type AccountItemOnCart struct {
	CartID         []byte
	ProductModelID []byte
	Quantity       int64
}

type AccountShop struct {
	ID []byte
}

type AccountUser struct {
	ID               []byte
	Email            string
	Phone            string
	Gender           AccountGender
	FullName         pgtype.Text
	DefaultAddressID []byte
}

type PaymentBase struct {
	ID            []byte
	UserID        []byte
	Address       string
	PaymentMethod PaymentPaymentMethod
	Total         pgtype.Numeric
	Status        PaymentStatus
	DateCreated   pgtype.Timestamp
}

type PaymentProductOnPayment struct {
	ID              []byte
	PaymentID       []byte
	ProductSerialID []byte
	Quantity        int64
	Price           pgtype.Numeric
	TotalPrice      pgtype.Numeric
}

type ProductBase struct {
	SerialID       []byte
	ProductModelID []byte
	DateCreated    pgtype.Timestamp
	DateUpdate     pgtype.Timestamp
}

type ProductBrand struct {
	ID          []byte
	Name        string
	Description string
}

type ProductImage struct {
	BrandID        []byte
	ProductModelID []byte
	Url            string
}

type ProductModel struct {
	ID               []byte
	BrandID          []byte
	Name             string
	Description      string
	ListPrice        pgtype.Numeric
	DateManufactured pgtype.Timestamp
}

type ProductSale struct {
	ID              []byte
	TagName         pgtype.Text
	ProductModelID  []byte
	DateStarted     pgtype.Timestamp
	DateEnded       pgtype.Timestamp
	Quantity        int64
	Used            int64
	IsActive        bool
	DiscountPercent pgtype.Int4
	DiscountPrice   pgtype.Numeric
}

type ProductTag struct {
	TagName     string
	Description pgtype.Text
}

type ProductTagOnProduct struct {
	ProductModelID []byte
	TagName        string
}
