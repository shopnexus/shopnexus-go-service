// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: address.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAddresses = `-- name: CountAddresses :one
SELECT COUNT(*) FROM "account".address
WHERE (
  (user_id = $1 OR $1 IS NULL) AND
  (full_name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (phone ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
  (address ILIKE '%' || $4 || '%' OR $4 IS NULL) AND
  (city ILIKE '%' || $5 || '%' OR $5 IS NULL) AND
  (province ILIKE '%' || $6 || '%' OR $6 IS NULL) AND
  (country ILIKE '%' || $7 || '%' OR $7 IS NULL)
)
`

type CountAddressesParams struct {
	UserID   pgtype.Int8
	FullName pgtype.Text
	Phone    pgtype.Text
	Address  pgtype.Text
	City     pgtype.Text
	Province pgtype.Text
	Country  pgtype.Text
}

func (q *Queries) CountAddresses(ctx context.Context, arg CountAddressesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAddresses,
		arg.UserID,
		arg.FullName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.Province,
		arg.Country,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAddress = `-- name: CreateAddress :one
INSERT INTO "account".address (user_id, full_name, phone, address, city, province, country)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, full_name, phone, address, city, province, country, date_created
`

type CreateAddressParams struct {
	UserID   int64
	FullName string
	Phone    string
	Address  string
	City     string
	Province string
	Country  string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (AccountAddress, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.UserID,
		arg.FullName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.Province,
		arg.Country,
	)
	var i AccountAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.Province,
		&i.Country,
		&i.DateCreated,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :one
DELETE FROM "account".address
WHERE (
  id = $1 AND
  (user_id = $2 OR $2 IS NULL)
)
RETURNING id, user_id, full_name, phone, address, city, province, country, date_created
`

type DeleteAddressParams struct {
	ID     int64
	UserID pgtype.Int8
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) (AccountAddress, error) {
	row := q.db.QueryRow(ctx, deleteAddress, arg.ID, arg.UserID)
	var i AccountAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.Province,
		&i.Country,
		&i.DateCreated,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, user_id, full_name, phone, address, city, province, country, date_created FROM "account".address
WHERE (
  id = $1 AND 
  (user_id = $2 OR $2 IS NULL)
)
`

type GetAddressParams struct {
	ID     int64
	UserID pgtype.Int8
}

func (q *Queries) GetAddress(ctx context.Context, arg GetAddressParams) (AccountAddress, error) {
	row := q.db.QueryRow(ctx, getAddress, arg.ID, arg.UserID)
	var i AccountAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.Province,
		&i.Country,
		&i.DateCreated,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, user_id, full_name, phone, address, city, province, country, date_created FROM "account".address
WHERE (
  (user_id = $1 OR $1 IS NULL) AND
  (full_name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (phone ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
  (address ILIKE '%' || $4 || '%' OR $4 IS NULL) AND
  (city ILIKE '%' || $5 || '%' OR $5 IS NULL) AND
  (province ILIKE '%' || $6 || '%' OR $6 IS NULL) AND
  (country ILIKE '%' || $7 || '%' OR $7 IS NULL)
)
ORDER BY date_created DESC
LIMIT $9
OFFSET $8
`

type ListAddressesParams struct {
	UserID   pgtype.Int8
	FullName pgtype.Text
	Phone    pgtype.Text
	Address  pgtype.Text
	City     pgtype.Text
	Province pgtype.Text
	Country  pgtype.Text
	Offset   int32
	Limit    int32
}

func (q *Queries) ListAddresses(ctx context.Context, arg ListAddressesParams) ([]AccountAddress, error) {
	rows, err := q.db.Query(ctx, listAddresses,
		arg.UserID,
		arg.FullName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.Province,
		arg.Country,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountAddress
	for rows.Next() {
		var i AccountAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FullName,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.Province,
			&i.Country,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE "account".address
SET
  full_name = COALESCE($2, full_name),
  phone = COALESCE($3, phone),
  address = COALESCE($4, address),
  city = COALESCE($5, city),
  province = COALESCE($6, province),
  country = COALESCE($7, country)
WHERE (
  id = $1 AND
  (user_id = $8 OR $8 IS NULL)
  -- TODO: thêm check user_id cho toàn bộ query (user chỉ đc interact của họ)
)
RETURNING id, user_id, full_name, phone, address, city, province, country, date_created
`

type UpdateAddressParams struct {
	ID       int64
	FullName pgtype.Text
	Phone    pgtype.Text
	Address  pgtype.Text
	City     pgtype.Text
	Province pgtype.Text
	Country  pgtype.Text
	UserID   pgtype.Int8
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (AccountAddress, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.FullName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.Province,
		arg.Country,
		arg.UserID,
	)
	var i AccountAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.Province,
		&i.Country,
		&i.DateCreated,
	)
	return i, err
}
