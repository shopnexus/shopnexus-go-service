// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_model.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProductModels = `-- name: CountProductModels :one
WITH filtered_models AS (
    SELECT pm.id
    FROM product.model pm
    WHERE (
        (pm.brand_id = $1 OR $1 IS NULL) AND
        (pm.name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
        (pm.description ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
        (pm.list_price >= $4 OR $4 IS NULL) AND
        (pm.list_price <= $5 OR $5 IS NULL) AND
        (pm.date_manufactured >= $6 OR $6 IS NULL) AND
        (pm.date_manufactured <= $7 OR $7 IS NULL)
    )
)
SELECT COUNT(id)
FROM filtered_models
`

type CountProductModelsParams struct {
	BrandID              pgtype.Int8
	Name                 pgtype.Text
	Description          pgtype.Text
	ListPriceFrom        pgtype.Int8
	ListPriceTo          pgtype.Int8
	DateManufacturedFrom pgtype.Timestamptz
	DateManufacturedTo   pgtype.Timestamptz
}

func (q *Queries) CountProductModels(ctx context.Context, arg CountProductModelsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProductModels,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPriceFrom,
		arg.ListPriceTo,
		arg.DateManufacturedFrom,
		arg.DateManufacturedTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProductModel = `-- name: CreateProductModel :one
WITH inserted_model AS (
    INSERT INTO product.model (
        brand_id, name, description, list_price, date_manufactured
    ) VALUES (
        $1, $2, $3, $4, $5
    ) RETURNING id, brand_id, name, description, list_price, date_manufactured
),
inserted_resources AS (
    INSERT INTO product.resource (owner_id, s3_id)
    SELECT id, unnest($6::text[]) FROM inserted_model
    RETURNING s3_id
),
inserted_tags AS (
    INSERT INTO product.tag_on_product_model (product_model_id, tag)
    SELECT id, unnest($7::text[]) FROM inserted_model
    RETURNING tag
)
SELECT 
    m.id,
    COALESCE(array_agg(res.s3_id), '{}')::text[] as resources,
    COALESCE(array_agg(t.tag), '{}')::text[] as tags
FROM inserted_model m
LEFT JOIN inserted_resources res ON true
LEFT JOIN inserted_tags t ON true
GROUP BY m.id
`

type CreateProductModelParams struct {
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Resources        []string
	Tags             []string
}

type CreateProductModelRow struct {
	ID        int64
	Resources []string
	Tags      []string
}

func (q *Queries) CreateProductModel(ctx context.Context, arg CreateProductModelParams) (CreateProductModelRow, error) {
	row := q.db.QueryRow(ctx, createProductModel,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
		arg.Resources,
		arg.Tags,
	)
	var i CreateProductModelRow
	err := row.Scan(&i.ID, &i.Resources, &i.Tags)
	return i, err
}

const deleteProductModel = `-- name: DeleteProductModel :exec
DELETE FROM product.model WHERE id = $1
`

func (q *Queries) DeleteProductModel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductModel, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, serial_id, product_model_id, quantity, sold, size, color, add_price, is_active, date_created, date_updated
FROM product.base
WHERE (
    id = $1 OR 
    serial_id = $2
)
`

type GetProductParams struct {
	ID       pgtype.Int8
	SerialID pgtype.Text
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (ProductBase, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ID, arg.SerialID)
	var i ProductBase
	err := row.Scan(
		&i.ID,
		&i.SerialID,
		&i.ProductModelID,
		&i.Quantity,
		&i.Sold,
		&i.Size,
		&i.Color,
		&i.AddPrice,
		&i.IsActive,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const getProductModel = `-- name: GetProductModel :one
SELECT 
    pm.id, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
    COALESCE(array_agg(i.s3_id) FILTER (WHERE i.s3_id IS NOT NULL), '{}')::text[] as resources,
    COALESCE(array_agg(t.tag) FILTER (WHERE t.tag IS NOT NULL), '{}')::text[] as tags
FROM product.model pm
LEFT JOIN product.resource i ON i.owner_id = pm.id
LEFT JOIN product.tag_on_product_model t ON t.product_model_id = pm.id
WHERE pm.id = $1
GROUP BY pm.id
`

type GetProductModelRow struct {
	ID               int64
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Resources        []string
	Tags             []string
}

func (q *Queries) GetProductModel(ctx context.Context, id int64) (GetProductModelRow, error) {
	row := q.db.QueryRow(ctx, getProductModel, id)
	var i GetProductModelRow
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.DateManufactured,
		&i.Resources,
		&i.Tags,
	)
	return i, err
}

const listProductModels = `-- name: ListProductModels :many
SELECT 
    pm.id, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
    COALESCE(array_agg(DISTINCT i.s3_id) FILTER (WHERE i.s3_id IS NOT NULL), '{}')::text[] as resources,
    COALESCE(array_agg(DISTINCT t.tag) FILTER (WHERE t.tag IS NOT NULL), '{}')::text[] as tags
FROM product.model pm
LEFT JOIN product.resource i ON i.owner_id = pm.id
LEFT JOIN product.tag_on_product_model t ON t.product_model_id = pm.id
WHERE (
    (pm.brand_id = $1 OR $1 IS NULL) AND
    (pm.name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
    (pm.description ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
    (pm.list_price >= $4 OR $4 IS NULL) AND
    (pm.list_price <= $5 OR $5 IS NULL) AND
    (pm.date_manufactured >= $6 OR $6 IS NULL) AND
    (pm.date_manufactured <= $7 OR $7 IS NULL)
)
GROUP BY pm.id
ORDER BY pm.id DESC
LIMIT $9
OFFSET $8
`

type ListProductModelsParams struct {
	BrandID              pgtype.Int8
	Name                 pgtype.Text
	Description          pgtype.Text
	ListPriceFrom        pgtype.Int8
	ListPriceTo          pgtype.Int8
	DateManufacturedFrom pgtype.Timestamptz
	DateManufacturedTo   pgtype.Timestamptz
	Offset               int32
	Limit                int32
}

type ListProductModelsRow struct {
	ID               int64
	BrandID          int64
	Name             string
	Description      string
	ListPrice        int64
	DateManufactured pgtype.Timestamptz
	Resources        []string
	Tags             []string
}

func (q *Queries) ListProductModels(ctx context.Context, arg ListProductModelsParams) ([]ListProductModelsRow, error) {
	rows, err := q.db.Query(ctx, listProductModels,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPriceFrom,
		arg.ListPriceTo,
		arg.DateManufacturedFrom,
		arg.DateManufacturedTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductModelsRow
	for rows.Next() {
		var i ListProductModelsRow
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.Name,
			&i.Description,
			&i.ListPrice,
			&i.DateManufactured,
			&i.Resources,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductModel = `-- name: UpdateProductModel :exec
UPDATE product.model
SET 
    brand_id = COALESCE($2, brand_id),
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    list_price = COALESCE($5, list_price),
    date_manufactured = COALESCE($6, date_manufactured)
WHERE id = $1
`

type UpdateProductModelParams struct {
	ID               int64
	BrandID          pgtype.Int8
	Name             pgtype.Text
	Description      pgtype.Text
	ListPrice        pgtype.Int8
	DateManufactured pgtype.Timestamptz
}

func (q *Queries) UpdateProductModel(ctx context.Context, arg UpdateProductModelParams) error {
	_, err := q.db.Exec(ctx, updateProductModel,
		arg.ID,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
	)
	return err
}
