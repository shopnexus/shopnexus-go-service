// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreatePaymentProducts implements pgx.CopyFromSource.
type iteratorForCreatePaymentProducts struct {
	rows                 []CreatePaymentProductsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatePaymentProducts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatePaymentProducts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PaymentID,
		r.rows[0].ProductSerialID,
		r.rows[0].Quantity,
		r.rows[0].Price,
		r.rows[0].TotalPrice,
	}, nil
}

func (r iteratorForCreatePaymentProducts) Err() error {
	return nil
}

func (q *Queries) CreatePaymentProducts(ctx context.Context, arg []CreatePaymentProductsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"payment", "product_on_payment"}, []string{"payment_id", "product_serial_id", "quantity", "price", "total_price"}, &iteratorForCreatePaymentProducts{rows: arg})
}
